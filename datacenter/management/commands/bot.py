from django.core.management.base import BaseCommand
from datacenter.models import *
from project.settings import BOT_TOKEN, ADMIN_ID
import asyncio
import phonenumbers
from pprint import pprint


class Command(BaseCommand):
    help = 'bot'


    def handle(self, *args, **options):
        print('Start')
        bot1()
need_register = []


def bot1():
    import os
    from vkbottle import GroupEventType, GroupTypes, Keyboard, Text, VKPayEvent
    from vkbottle.bot import Bot, Message
    from vkbottle import Keyboard, KeyboardButtonColor, Text, OpenLink, Callback, VKPay
    from vkbottle import PhotoMessageUploader
    from vkbottle.tools import DocMessagesUploader
    from logging import disable, WARN, CRITICAL
    import json
    import asyncio

    disable(level=CRITICAL)
    bot_token = BOT_TOKEN
    vk = Bot(bot_token)
    photo_uploader = PhotoMessageUploader(vk.api)


    def get_user(u):
        user = Vk_user.objects.get(vk_id=u)
        return {
            'name': user.name,
            'id': user.vk_id,
            'num_boughts': user.orders.count(),
            'phone': user.phonenumber
        }
    def get_keyboard_categories():
        keyboard = Keyboard(one_time = False, inline = True)
        for product in ProductCategory.objects.all():
            keyboard.add(Callback(product.title, payload={'cmd': f'category_{product.id}'}))
        keyboard.row()
        keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
        return keyboard


    def update_phone(u, phone):
        user = Vk_user.objects.get(vk_id=u)
        user.phonenumber = phone
        user.save()
    def get_user_cart(user):
        cart = Vk_user.objects.get(vk_id=user).cart
        if cart is None:
            return []
        else:
            return [int(i) for i in cart.split('; ')]


    def create_order(u, products):
        user = Vk_user.objects.get(vk_id=u)
        order = Order.objects.create(
            user=user,
        )
        for i in products:
            product = Product.objects.get(id=i)
            order_el = OrderElements.objects.create(
                order=order,
                product=product,
                quantity=1,
                price=product.price
            )
    def update_uder(user, cart):
        u = Vk_user.objects.get(vk_id=user)
        if cart is None:
            u.cart = None
        else:
            u.cart = '; '.join(cart)
        u.save()
    

    def get_user_orders(u):
        user = Vk_user.objects.get(vk_id=u)
        otv = []
        for order in user.orders.all():
            all_status = {
                'first': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'second': '–í –ø—É—Ç–∏',
                'third': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'canceled': '–û—Ç–º–µ–Ω—ë–Ω'
            }
            order_data = {
                'status': all_status[order.status],
                'address': order.address,
                'created_at': order.created_at,
                'delivered_at': order.delivered_at,
                'products': [{'name': i.product.title, 'quantity': i.quantity, 'price': int(i.price)} for i in order.products.all()]
            }
            otv.append(order_data)
        return otv


    def get_keyboard_products(category):
        keyboard = Keyboard(one_time = False, inline = True)
        for product in Product.objects.filter(category=category):
            keyboard.add(Callback(product.title, payload={'cmd': f'product_{product.id}'}))
        keyboard.row()
        keyboard.add(Callback('–î–æ–º–æ–π', payload={'cmd': 'menu'}))
        return (keyboard, ProductCategory.objects.get(id=category).title)

    def get_product(product):
        product_1 = Product.objects.get(id=product)
        return {
            'id': product_1.id,
            'title': product_1.title,
            'description': product_1.description,
            'image': product_1.image.path,
            'price': int(product_1.price),
            'category': product_1.category.id
        }
            # need_register.append(message.from_id)
            # await message.answer(
            #     message = '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏:) –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 000 000 00 00',
            # )
    @vk.on.private_message(text=['–ù–∞—á–∞—Ç—å'])
    @vk.on.private_message(payload={'cmd': 'start'})
    async def start(message: Message):
        global need_register
        loop = asyncio.get_running_loop()
        all_users = await loop.run_in_executor(None, lambda: [i.vk_id for i in Vk_user.objects.all()])
        if message.from_id not in all_users:
            # users_info = await vk.api.users.get(message.from_id)
            # await loop.run_in_executor(None, lambda name, last, id: Vk_user.objects.create(name=f'{name} {last}', vk_id=id), users_info[0].first_name, users_info[0].last_name, message.from_id)
            loop = asyncio.get_running_loop()
            users_info = await vk.api.users.get(message.from_id)
            loop.run_in_executor(None, lambda name, last, id, phone: Vk_user.objects.create(name=f'{name} {last}', vk_id=id, phonenumber=phone), users_info[0].first_name, users_info[0].last_name, message.from_id, None)
        keyboard = Keyboard()
        keyboard.add(Text('üõí –¢–æ–≤–∞—Ä—ã'), color=KeyboardButtonColor.PRIMARY)
        keyboard.add(Text('üì± –ü—Ä–æ—Ñ–∏–ª—å'))
        keyboard.row()
        keyboard.add(Text('üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞'), color=KeyboardButtonColor.POSITIVE)
        await message.answer(
            message = '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω',
            keyboard = (
            keyboard
            )
        )

    @vk.on.private_message(text='üõí –¢–æ–≤–∞—Ä—ã')
    # @vk.on.private_message(payload={'cmd': 'menu'})
    async def products(message: Message):
        loop = asyncio.get_running_loop()
        keyboard = await loop.run_in_executor(None, get_keyboard_categories)
        await message.answer(
            message=f'–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:)',
            keyboard=(keyboard)
        )



    @vk.on.private_message(text='üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞')
    async def cart(message: Message):
        loop = asyncio.get_running_loop()
        user_cart = await loop.run_in_executor(None, get_user_cart, message.from_id)
        products = []
        keyboard = Keyboard(inline=True)
        for num, i in enumerate(user_cart[::-1], 1):
            product = await loop.run_in_executor(None, get_product, i)
            text = f'{num}. {product["title"]} | {product["price"]} —Ä—É–±.'
            products.append(text)
            keyboard.add(Callback(num, payload={'cmd': f'remove_{product["id"]}'}), color=KeyboardButtonColor.NEGATIVE)
        if products:
            keyboard.row()
            keyboard.add(Callback('–û–ø–ª–∞—Ç–∏—Ç—å', payload={'cmd': 'pay'}), color=KeyboardButtonColor.POSITIVE)
            keyboard.row()
        keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
        otv = "\n".join(products)
        if products:
            await message.answer(
                f'–≠—Ç–∏ —Ç–æ–≤–∞—Ä—ã —É –í–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ: \n{otv}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ü–∏—Ñ—Ä–æ–π —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!',
                keyboard=keyboard
            )
        else:
            await message.answer(
                f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞:(',
                keyboard=keyboard
            )
        
    

    @vk.on.private_message(text='üì± –ü—Ä–æ—Ñ–∏–ª—å')
    async def profile(message: Message):
        loop = asyncio.get_running_loop()
        user = await loop.run_in_executor(None, get_user, message.from_id)
        text = f'üôç‚Äç‚ôÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user["name"]}\nüÜî ID: {user["id"]}\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user["phone"]}\n------------------\nüõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {user["num_boughts"]} —à—Ç.'
        keyboard = Keyboard(inline=True)
        keyboard.add(Callback('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã', payload={'cmd': 'orders'}))
        keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
        await message.answer(
            text,
            keyboard=keyboard
        )
    #     global admin
    #     admin = True
    #     sections = db.get_all_sections()
    #     keyboard = Keyboard(inline=True)
    #     keyboard.add(Callback('‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', payload={'cmd': 'add_new_section'}))
    #     keyboard.row()
    #     for section in sections:
    #         keyboard.add(Callback(section[0], payload={'cmd': f'set-adm_{section[1]}'}))
    #     keyboard.row()
    #     keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
    #     await message.answer('–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞! –í–æ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', keyboard=keyboard)

    @vk.on.private_message(payload={'pays': 0})
    async def people_was_pay(message:Message):
        print(1)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ {message.attachments[0].amount} —Ä—É–±–ª–µ–π!')




    @vk.on.payment(VKPayEvent)
    async def handle_payment(event: VKPayEvent):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        print(1)

    @vk.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=GroupTypes.MessageEvent)
    async def message_event_handLer(event: GroupTypes.MessageEvent):
        loop = asyncio.get_running_loop()
        mes = await vk.api.messages.get_history(user_id=event.object.user_id, count=2, offset=0)
        # count = vk.api.messages.get_history(user_id=event.object.user_id)['count']
        await vk.api.messages.delete(peer_id=event.object.peer_id, message_ids=mes.items[0].id, delete_for_all=True, group_id=event.object.user_id)
        if event.object.payload['cmd'] == 'close':
            return
        elif event.object.payload['cmd'] == 'pay':
            user = await loop.run_in_executor(None, get_user, event.object.user_id)
            if not user['phone']:
                need_register.append(event.object.user_id)
                await vk.api.messages.send(
                    user_id=event.object.user_id,
                    random_id=0,
                    peer_id=event.object.peer_id,
                    message = '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏:) –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 000 000 00 00',
                )
                return
            loop = asyncio.get_running_loop()
            cart = await loop.run_in_executor(None, get_user_cart, event.object.user_id)
            products2 = []
            keyboard = Keyboard(inline=True)
            price = 0
            for i in cart:
                product = await loop.run_in_executor(None, get_product, int(i))
                products2.append(product['id'])
                price += product['price']
            products2 = [str(i) for i in products2]
            keyboard.add(VKPay(payload={'products': '; '.join(products2)}, hash=f'action=pay-to-group&amount={price}&group_id={221254486}'))
            keyboard.row()
            keyboard.add(Callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', payload={'cmd': 'close'}))
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f'–° –í–∞—Å {price} —Ä—É–±. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user["phone"]}',
                keyboard=keyboard
            )
                
            # await loop.run_in_executor(None, create_order, event.object.user_id, products2)
            # await loop.run_in_executor(None, update_uder, event.object.user_id, None)
            # await vk.api.messages.send(
            #     user_id=event.object.user_id,
            #     random_id=0,
            #     peer_id=event.object.peer_id,
            #     message='–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–æ–º–µ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å:)',
            #     keyboard=keyboard
            # )
        elif 'remove_' in event.object.payload['cmd']:
            keyboard = Keyboard(inline=True)
            keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
            loop = asyncio.get_running_loop()
            product = await loop.run_in_executor(None, get_product, event.object.payload["cmd"].replace("remove_", ""))
            cart = await loop.run_in_executor(None, get_user_cart, event.object.user_id)
            if '' in cart:
                cart.remove('')
            # print(event.object.user_id in all_users)
            cart = [str(i) for i in cart]
            if len(cart) == 1:
                cart = None
            else:
                cart.remove(event.object.payload["cmd"].replace("remove_", ""))
            await loop.run_in_executor(None, update_uder, event.object.user_id, cart)
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f'–¢–æ–≤–∞—Ä {product["title"]} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                keyboard=keyboard
            )
        elif event.object.payload['cmd'] == 'start1':
            keyboard = Keyboard()
            keyboard.add(Text('üõí –¢–æ–≤–∞—Ä—ã'), color=KeyboardButtonColor.PRIMARY)
            keyboard.add(Text('üì± –ü—Ä–æ—Ñ–∏–ª—å'))
            keyboard.row()
            keyboard.add(Text('üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞'), color=KeyboardButtonColor.POSITIVE)
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message = '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω',
                keyboard = (
                keyboard
                )
            )
        elif 'category_' in event.object.payload['cmd']:
            loop = asyncio.get_running_loop()
            keyboard, category = await loop.run_in_executor(None, get_keyboard_products, event.object.payload["cmd"].replace("category_", ""))
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f'–≠—Ç–æ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"',
                keyboard=keyboard
            )
        elif event.object.payload['cmd'] == 'menu':
            loop = asyncio.get_running_loop()
            keyboard = await loop.run_in_executor(None, get_keyboard_categories)
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f'–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:)',
                keyboard=keyboard
            )
        elif 'product_' in event.object.payload['cmd']:
            loop = asyncio.get_running_loop()
            product = await loop.run_in_executor(None, get_product, event.object.payload["cmd"].replace("product_", ""))
            photo = await photo_uploader.upload(
                file_source=product['image'],
                peer_id=event.object.peer_id,
            )
            keyboard = Keyboard(one_time = False, inline = True)
            keyboard.add(Callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõçÔ∏è', payload={'cmd': f'add_to_cart_{product["id"]}'}), color=KeyboardButtonColor.POSITIVE)
            keyboard.row()
            keyboard.add(Callback("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô", payload={'cmd': f'category_{product["category"]}'}))
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±",
                attachment=photo,
                keyboard=keyboard
            )
        elif 'add_to_cart_' in event.object.payload['cmd']:
            loop = asyncio.get_running_loop()
            product = await loop.run_in_executor(None, get_product, event.object.payload["cmd"].replace("add_to_cart_", ""))
            cart = await loop.run_in_executor(None, get_user_cart, event.object.user_id)
            if '' in cart:
                cart.remove('')
            # print(event.object.user_id in all_users)
            # print(cart)
            cart = [str(i) for i in cart]
            cart.append(str(event.object.payload["cmd"].replace("add_to_cart_", "")))
            await loop.run_in_executor(None, update_uder, event.object.user_id, cart)
            keyboard = Keyboard(one_time = False, inline = True)
            keyboard.add(Callback("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô", payload={'cmd': f'category_{product["category"]}'}))
            await vk.api.messages.send(
                user_id=event.object.user_id,
                random_id=0,
                peer_id=event.object.peer_id,
                message=f'–¢–æ–≤–∞—Ä {product["title"]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
                keyboard=keyboard
            )
        elif event.object.payload['cmd'] == 'orders':
            loop = asyncio.get_running_loop()
            orders = await loop.run_in_executor(None, get_user_orders, event.object.user_id)
            keyboard = Keyboard(one_time = False, inline = True)
            keyboard.add(Callback('üö´ –ó–∞–∫—Ä—ã—Ç—å', payload={'cmd': 'close'}))
            otv = []
            if orders:
                for num, i in enumerate(orders, start=1):
                    products = ';\n\n'.join([f'–ù–∞–∑–≤–∞–Ω–∏–µ: {j["name"]},\n      –¶–µ–Ω–∞: {j["price"]} —Ä—É–±.' for j in i['products']])
                    text = f"{num}. –°—Ç–∞—Ç—É—Å: {i['status']},\n–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(i['products'])},\n   –¢–æ–≤–∞—Ä—ã:\n      {products}"
                    otv.append(text)
                await vk.api.messages.send(
                    user_id=event.object.user_id,
                    random_id=0,
                    peer_id=event.object.peer_id,
                    message='\n'.join(otv),
                    keyboard=keyboard
                )
            else:
                await vk.api.messages.send(
                    user_id=event.object.user_id,
                    random_id=0,
                    peer_id=event.object.peer_id,
                    message=f'–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏',
                    keyboard=keyboard
                )

    @vk.on.private_message()
    async def update(message: Message):
        global need_register
        if message.from_id in need_register:
            parsed_number = phonenumbers.parse(message.text, 'RU')
            if phonenumbers.is_valid_number(parsed_number):
                loop = asyncio.get_running_loop()
                users_info = await vk.api.users.get(message.from_id)
                loop.run_in_executor(None, update_phone, message.from_id, message.text)
                keyboard = Keyboard(inline=True)
                keyboard.add(Callback('üèöÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', payload={'cmd': 'start1'}), color=KeyboardButtonColor.POSITIVE)
                need_register.remove(message.from_id)
                await message.answer(
                    message = '–°–ø–∞—Å–∏–±–æ:) –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å:)',
                    keyboard = (
                    keyboard
                    )
                )
                return
            else:
                await message.answer(
                    message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                )
            
    # # –¢–æ–ª–∏–∫ –≤–∏–¥–∏–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ
    vk.run_forever()